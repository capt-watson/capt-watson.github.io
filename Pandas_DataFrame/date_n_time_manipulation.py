import pandas as pd


col = pd.Series(['2024-3-14 10:00:00+00:00','2024-3-14 10:30:00+00:00','2024-3-14 11:00:00+00:00','2024-1-1 10:00:00+00:00','2024-1-8 5:00:00+00:00','2024-1-18 4:20:00+00:00','2024-2-2 7:30:00+00:00','2024-2-9 12:30:00+00:00','2024-2-27 9:00:00+00:00','2024-3-5 17:00:00+00:00','2024-3-1 11:30:00+00:00','2024-3-4 8:00:00+00:00','2024-3-11 15:30:00+00:00','2024-3-3 2:00:00+00:00','2024-3-14 9:00:00+00:00'])

utc_s = pd.to_datetime(col,utc=True)

# utc_s

#~ 0    2024-03-14 10:00:00+00:00
#~ 1    2024-03-14 10:30:00+00:00
#~ 2    2024-03-14 11:00:00+00:00
#~ 3    2024-01-01 10:00:00+00:00
#~ 4    2024-01-08 05:00:00+00:00
#~ 5    2024-01-18 04:20:00+00:00
#~ 6    2024-02-02 07:30:00+00:00
#~ 7    2024-02-09 12:30:00+00:00
#~ 8    2024-02-27 09:00:00+00:00
#~ 9    2024-03-05 17:00:00+00:00
#~ 10   2024-03-01 11:30:00+00:00
#~ 11   2024-03-04 08:00:00+00:00
#~ 12   2024-03-11 15:30:00+00:00
#~ 13   2024-03-03 02:00:00+00:00
#~ 14   2024-03-14 09:00:00+00:00
#~ dtype: datetime64[ns, UTC]

## Note that the dates are stored as UTC and the series has been converted into a datetime object. Now one can apply the .dt attribute.

# utc_s.dt.tz_convert('America/Denver')

#~ 0    2024-03-14 04:00:00-06:00
#~ 1    2024-03-14 04:30:00-06:00
#~ 2    2024-03-14 05:00:00-06:00
#~ 3    2024-01-01 03:00:00-07:00
#~ 4    2024-01-07 22:00:00-07:00
#~ 5    2024-01-17 21:20:00-07:00
#~ 6    2024-02-02 00:30:00-07:00
#~ 7    2024-02-09 05:30:00-07:00
#~ 8    2024-02-27 02:00:00-07:00
#~ 9    2024-03-05 10:00:00-07:00
#~ 10   2024-03-01 04:30:00-07:00
#~ 11   2024-03-04 01:00:00-07:00
#~ 12   2024-03-11 09:30:00-06:00
#~ 13   2024-03-02 19:00:00-07:00
#~ 14   2024-03-14 03:00:00-06:00
#~ dtype: datetime64[ns, America/Denver]

## Here we have converted the UTC time into Denver local time.

s = pd.Series(['2024-3-14 10:00:00-06:00','2024-3-14 10:30:00-06:00','2024-3-14 11:00:00-07:00','2024-1-1 10:00:00-07:00','2024-1-8 5:00:00-07:00','2024-1-18 4:20:00-06:00','2024-2-2 7:30:00-07:00','2024-2-9 12:30:00-07:00','2024-2-27 9:00:00-07:00','2024-3-5 17:00:00-07:00','2024-3-1 11:30:00-07:00','2024-3-4 8:00:00-07:00','2024-3-11 15:30:00-07:00','2024-3-3 2:00:00-07:00','2024-3-14 9:00:00-07:00'])

pd.to_datetime(s, utc=True).dt.tz_convert('America/Denver')

#~ 0    2024-03-14 10:00:00-06:00
#~ 1    2024-03-14 10:30:00-06:00
#~ 2    2024-03-14 12:00:00-06:00
#~ 3    2024-01-01 10:00:00-07:00
#~ 4    2024-01-08 05:00:00-07:00
#~ 5    2024-01-18 03:20:00-07:00
#~ 6    2024-02-02 07:30:00-07:00
#~ 7    2024-02-09 12:30:00-07:00
#~ 8    2024-02-27 09:00:00-07:00
#~ 9    2024-03-05 17:00:00-07:00
#~ 10   2024-03-01 11:30:00-07:00
#~ 11   2024-03-04 08:00:00-07:00
#~ 12   2024-03-11 16:30:00-06:00
#~ 13   2024-03-03 02:00:00-07:00
#~ 14   2024-03-14 10:00:00-06:00
#~ dtype: datetime64[ns, America/Denver]

## Since the above data has already been offset, the datetime conversion doesn't change either the date or the time.

#! Loading local Time Data

#% For local date information, one would need to have the date, the offset & the timezone.

time = pd.Series(['2024-3-14 01:00:00','2024-3-14 02:30:00','2024-3-14 04:00:00','2024-1-1 03:00:00','2024-1-8 05:00:00','2024-1-18 04:30:00','2024-2-2 07:30:00','2024-2-9 09:30:00','2024-2-27 08:00:00','2024-3-5 06:00:00','2024-3-1 07:30:00','2024-3-4 04:00:00','2024-3-11 11:30:00','2024-3-3 03:00:00','2024-3-14 09:00:00',
'2024-3-4 03:00:00','2024-3-6 07:00:00','2024-3-12 10:00:00'])

offset = pd.Series([-7,-7,-7,-7,-7,-6,-6,-6,-6,-6,-6,-7,-7,-7,-7,6, 7, 7])

pd.to_datetime(time).groupby(offset).transform(lambda i: i.dt.tz_localize(i.name).dt.tz_convert('America/Denver'))



#~ 0    2024-03-13 19:00:07-06:00
#~ 1    2024-03-13 20:30:07-06:00
#~ 2    2024-03-13 22:00:07-06:00
#~ 3    2023-12-31 20:00:07-07:00
#~ 4    2024-01-07 22:00:07-07:00
#~ 5    2024-01-17 21:30:06-07:00
#~ 6    2024-02-02 00:30:06-07:00
#~ 7    2024-02-09 02:30:06-07:00
#~ 8    2024-02-27 01:00:06-07:00
#~ 9    2024-03-04 23:00:06-07:00
#~ 10   2024-03-01 00:30:06-07:00
#~ 11   2024-03-03 21:00:07-07:00
#~ 12   2024-03-11 05:30:07-06:00
#~ 13   2024-03-02 20:00:07-07:00
#~ 14   2024-03-14 03:00:07-06:00
#~ dtype: datetime64[ns, America/Denver]

## Here to apply the offset to the corresponding time, use .groupby() with .transform(). Once all the dates are grouped together with offsets, call dt.tz_localize() on them.

## The dt.tz_localize() method converts the time zone (tz)-naive Datetime Series object into a tz-aware Datetime Series.

#% naive datetime series means without timezone associated with them.

#% aware datetime series means with timezone associated with them.

offset = offset.replace({-7:'-07:00', -6:'-06:00'})
local = pd.to_datetime(time).groupby(offset).transform(lambda i: i.dt.tz_localize(i.name).dt.tz_convert('America/Denver'))

# local

#~ 0    2024-03-14 02:00:00-06:00
#~ 1    2024-03-14 03:30:00-06:00
#~ 2    2024-03-14 05:00:00-06:00
#~ 3    2024-01-01 03:00:00-07:00
#~ 4    2024-01-08 05:00:00-07:00
#~ 5    2024-01-18 03:30:00-07:00
#~ 6    2024-02-02 06:30:00-07:00
#~ 7    2024-02-09 08:30:00-07:00
#~ 8    2024-02-27 07:00:00-07:00
#~ 9    2024-03-05 05:00:00-07:00
#~ 10   2024-03-01 06:30:00-07:00
#~ 11   2024-03-04 04:00:00-07:00
#~ 12   2024-03-11 12:30:00-06:00
#~ 13   2024-03-03 03:00:00-07:00
#~ 14   2024-03-14 10:00:00-06:00
#~ dtype: datetime64[ns, America/Denver]

## In the earlier example, the minutes had been moved by 6 or 7 seconds. In order to correct this error, need to apply offset with .replace method as shown above.

#! converting local time to UTC

# local.dt.tz_convert('UTC')


#~ 0    2024-03-14 08:00:00+00:00
#~ 1    2024-03-14 09:30:00+00:00
#~ 2    2024-03-14 11:00:00+00:00
#~ 3    2024-01-01 10:00:00+00:00
#~ 4    2024-01-08 12:00:00+00:00
#~ 5    2024-01-18 10:30:00+00:00
#~ 6    2024-02-02 13:30:00+00:00
#~ 7    2024-02-09 15:30:00+00:00
#~ 8    2024-02-27 14:00:00+00:00
#~ 9    2024-03-05 12:00:00+00:00
#~ 10   2024-03-01 13:30:00+00:00
#~ 11   2024-03-04 11:00:00+00:00
#~ 12   2024-03-11 18:30:00+00:00
#~ 13   2024-03-03 10:00:00+00:00
#~ 14   2024-03-14 16:00:00+00:00
#~ dtype: datetime64[ns, UTC]

## The dt.tz_convert('UTC') converts the local time back to UTC

#! Converting to Epochs

# local.view(int).floordiv(1e9).astype(int)

y = pd.to_datetime(local).astype('int64')//10**9

#~ 0     1710403200
#~ 1     1710408600
#~ 2     1710414000
#~ 3     1704103200
#~ 4     1704715200
#~ 5     1705573800
#~ 6     1706880600
#~ 7     1707492600
#~ 8     1709042400
#~ 9     1709640000
#~ 10    1709299800
#~ 11    1709550000
#~ 12    1710181800
#~ 13    1709460000
#~ 14    1710432000
#~ 15    1709521194
#~ 16    1709708393
#~ 17    1710237593
#~ dtype: int64


#! To convert epoch back into UTC

pd.to_datetime(y, unit='s').dt.tz_localize('UTC')

#~ 0    2024-03-14 08:00:00+00:00
#~ 1    2024-03-14 09:30:00+00:00
#~ 2    2024-03-14 11:00:00+00:00
#~ 3    2024-01-01 10:00:00+00:00
#~ 4    2024-01-08 12:00:00+00:00
#~ 5    2024-01-18 10:30:00+00:00
#~ 6    2024-02-02 13:30:00+00:00
#~ 7    2024-02-09 15:30:00+00:00
#~ 8    2024-02-27 14:00:00+00:00
#~ 9    2024-03-05 12:00:00+00:00
#~ 10   2024-03-01 13:30:00+00:00
#~ 11   2024-03-04 11:00:00+00:00
#~ 12   2024-03-11 18:30:00+00:00
#~ 13   2024-03-03 10:00:00+00:00
#~ 14   2024-03-14 16:00:00+00:00
#~ 15   2024-03-04 02:59:54+00:00
#~ 16   2024-03-06 06:59:53+00:00
#~ 17   2024-03-12 09:59:53+00:00
#~ dtype: datetime64[ns, UTC]

url = 'https://github.com//mattharrison/datasets/raw/master/data/alta-noaa-1980-2019.csv'

alta_df = pd.read_csv(url)

dates = pd.to_datetime(alta_df.DATE)

#~ 0       1980-01-01
#~ 1       1980-01-02
#~ 2       1980-01-03
#~ 3       1980-01-04
#~ 4       1980-01-05
#~            ...    
#~ 14155   2019-09-03
#~ 14156   2019-09-04
#~ 14157   2019-09-05
#~ 14158   2019-09-06
#~ 14159   2019-09-07
#~ Name: DATE, Length: 14160, dtype: datetime64[ns]

## Date series will be pulled from the DATE column

# dates.dt.day_name('es_ES')
## This code will print the names the day in spanish.

#~ 0           Martes
#~ 1        Miércoles
#~ 2           Jueves
#~ 3          Viernes
#~ 4           Sábado
#~            ...    
#~ 14155       Martes
#~ 14156    Miércoles
#~ 14157       Jueves
#~ 14158      Viernes
#~ 14159       Sábado
#~ Name: DATE, Length: 14160, dtype: object

dates.dt.is_month_end

#~ 0        False
#~ 1        False
#~ 2        False
#~ 3        False
#~ 4        False
#~          ...  
#~ 14155    False
#~ 14156    False
#~ 14157    False
#~ 14158    False
#~ 14159    False
#~ Name: DATE, Length: 14160, dtype: bool

## Here .is_month_end is a property as it does not require parameters to provide results.


dates.dt.strftime('%d-%m-%Y')

#~ 0        01-01-1980
#~ 1        02-01-1980
#~ 2        03-01-1980
#~ 3        04-01-1980
#~ 4        05-01-1980
#~             ...    
#~ 14155    03-09-2019
#~ 14156    04-09-2019
#~ 14157    05-09-2019
#~ 14158    06-09-2019
#~ 14159    07-09-2019
#~ Name: DATE, Length: 14160, dtype: object

## Here .strftime is a method as it does require parameters to provide results.

dates.dt.day_name(locale='en_US')

